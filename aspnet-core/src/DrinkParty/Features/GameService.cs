using DrinkParty.EntityFramework;
using DrinkParty.Hubs.Contracts;
using DrinkParty.Repositories;
using Microsoft.EntityFrameworkCore.Internal;
using System;
using System.Linq;
using System.Threading.Tasks;

namespace DrinkParty.Features.Rooms
{

    public class GameService
    {
        //    private readonly RoomRepository _roomRepository;
        //    private readonly PlayerRepository _playerRepository;
        //    private readonly TransactionService _transactionService;
        //    private readonly IGameHubFrontend _gameHubFrontend;

        //    public GameService(RoomRepository roomRepository, PlayerRepository playerRepository, TransactionService transactionService, IGameHubFrontend gameHubFrontend)
        //    {
        //        _roomRepository = roomRepository;
        //        _playerRepository = playerRepository;
        //        _transactionService = transactionService;
        //        _gameHubFrontend = gameHubFrontend;
        //    }

        //    public async Task<string> CreateRoom(string playerName)
        //    {
        //        var autogeneratedCode = await GenerateRandomRoomCode();
        //        var room = await _roomRepository.Create(autogeneratedCode);
        //        if (room is null)
        //            throw new Exception("Error creating room");

        //        var player = await _playerRepository.Create(playerName, room.Id, true);
        //        if (player is null)
        //            throw new Exception("Error creating player");

        //        return room.Code;
        //    }


        //    public async Task JoinRoom(string roomCode, string playerName)
        //    {
        //        var room = await _roomRepository.GetByCode(roomCode);
        //        if (room is null)
        //            throw new Exception("Room doesn't exist");

        //        if (room.Players.Where(p => p.Name == playerName).Any())
        //            throw new Exception("Already exist a player named" + playerName);

        //        await _playerRepository.Create(playerName, room.Id, false);
        //    }


        //    public async Task<string> GenerateRandomRoomCode()
        //    {
        //        string code = null;
        //        while (code == null)
        //        {
        //            var randomCode = new Random().Next(0, 100).ToString();
        //            if ((await _roomRepository.GetByCode(randomCode) is null))
        //            {
        //                code = randomCode;
        //            }
        //        }

        //        return code;
        //    }
        //}
    }
}
